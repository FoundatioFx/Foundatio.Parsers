@namespace Foundatio.Parsers.LuceneQueries
@classname LuceneQueryParser
@trace true
@using System.Linq;
@using Foundatio.Parsers.LuceneQueries.Nodes;
@using Foundatio.Parsers.LuceneQueries.Extensions;

@members
{
    public class FieldInfo {
        public string Field { get; set; }
        public string Prefix { get; set; }
    }
}

start<GroupNode>
  = _* node:node? _* EOF
    {
        node.SingleOrDefault() ?? new GroupNode()
    }

node<GroupNode>
  = op:operator_exp EOF
    {
        new GroupNode {
            Operator = op
        }
    }
  / op:operator_exp right:node
    {
        right
    }
  / left:group_exp op:operator_exp? right:node*
    {{
        var node= new GroupNode {
            Left = left
        };
        left.Parent = node;

        var rightExp =
                right.Count == 0
                ? (TermNode)null
                : right[0].Right == null
                    ? right[0].Left
                    : right[0];

        if (rightExp != null)
        {
            node.Operator = op.SingleOrDefault();
            node.Right = rightExp;
            rightExp.Parent = node;
        }

        return node;
    }}

group_exp<IQueryNode>
  = field_exp:field_exp _*
    {
        field_exp
    }
  / paren_exp

paren_exp<GroupNode>
  = not:not_exp? op:prefix_operator_exp? "(" _* node:node _* (")" / #error{ "Missing closing paren ')' for group expression" }) boost:boost_modifier? _*
    {{
        node.HasParens = true;
        node.Prefix = op.SingleOrDefault();

        if (boost.Count > 0)
            node.Boost = boost.SingleOrDefault();

        if (not.Any())
          node.IsNegated = true;

        return node;
    }}

field_exp<IQueryNode>
  = not:not_exp? op:prefix_operator_exp? '_exists_' _* ':' _* fieldname:name_term
  {{
        return new ExistsNode { IsNegated = not.Any(), Prefix = op.SingleOrDefault(), Field = fieldname };
  }}
  / not:not_exp? op:prefix_operator_exp? '_missing_' _* ':' _* fieldname:name_term
  {{
        return new MissingNode { IsNegated = not.Any(), Prefix = op.SingleOrDefault(), Field = fieldname };
  }}
  / not:not_exp? name:fieldname? range:range_operator_exp
    {{
        if (name.Count == 1) {
          range.IsNegated = not.Any();
          range.Field = name[0].Field;
          range.Prefix = name[0].Prefix;
        }

        return range;
    }}
  / not:not_exp? op:prefix_operator_exp? range:range_operator_exp
    {{
        range.IsNegated = not.Any();
        range.Prefix = op.SingleOrDefault();
        return range;
    }}
  / not:not_exp? name:fieldname node:paren_exp
    {{
        node.IsNegated = not.Any();
        node.Field = name.Field;
        node.Prefix = name.Prefix;
        return node;
    }}
  / not:not_exp? name:fieldname? term:term
    {{
        var query = new TermNode();

        if (not.Any())
          query.IsNegated = true;

        if (name.Count == 1) {
          query.Field = name[0].Field;
          query.Prefix = name[0].Prefix;
        }

        term.CopyTo(query);

        return query;
    }}

fieldname<FieldInfo> -lexical
  = op:prefix_operator_exp? fieldname:name_term _* ':' _*
      {{
        var result = new FieldInfo { Field = fieldname };

        result.Prefix = op.SingleOrDefault();

        return result;
    }}

term<TermNode>
  = not:not_exp? op:prefix_operator_exp? !operator_exp term:quoted_term proximity:proximity_modifier? boost:boost_modifier? _*
      {{
        var result = new TermNode { Term = term, IsQuotedTerm = true };

        if (proximity.Count > 0)
            result.Proximity = proximity.SingleOrDefault();

        if (boost.Count > 0)
            result.Boost = boost.SingleOrDefault();

        if (not.Any())
          result.IsNegated = true;
        
        result.Prefix = op.SingleOrDefault();

        return result;
    }}
  / not:not_exp? op:prefix_operator_exp? !operator_exp term:regex_term proximity:proximity_modifier? boost:boost_modifier? _*
    {{
        var result = new TermNode { Term = term, IsRegexTerm = true };

        if (proximity.Count > 0)
            result.Proximity = proximity.SingleOrDefault();

        if (boost.Count > 0)
            result.Boost = boost.SingleOrDefault();

        if (not.Any())
          result.IsNegated = true;
        
        result.Prefix = op.SingleOrDefault();

        return result;
    }}
  / not:not_exp? op:prefix_operator_exp? !operator_exp term:unquoted_term proximity:proximity_modifier? boost:boost_modifier? _*
    {{
        var result = new TermNode { Term = term };

        if (proximity.Count > 0)
            result.Proximity = proximity.SingleOrDefault();

        if (boost.Count > 0)
            result.Boost = boost.SingleOrDefault();

        if (not.Any())
          result.IsNegated = true;
        
        result.Prefix = op.SingleOrDefault();

        return result;
    }}
  / not:not_exp? prefix:prefix_operator_exp? op:operator_exp #error{ "Unexpected operator '" + op + "'." }

// https://lucene.apache.org/core/2_9_4/queryparsersyntax.html#Escaping%20Special%20Characters
escape_sequence
  = '\\' [ \+\-\!\(\)\{\}\[\]\^\"\~\*\?\:\\\/]

name_term
  = term:(([^: \\\t\r\n\f\{\}\(\)"^~\[\]] / escape_sequence)+ "")
    {
        term
    }

unquoted_term
  = term:(([^: \\\t\r\n\f\{\}\(\)"^~\[\]] / escape_sequence)+ "")
    {
        term
    }

range_unquoted_term
  = term:((([^: \\\.\t\r\n\f\{\}\(\)"^~\[\]] / [\.][^\.] / escape_sequence)+ "") / '*')
    {
        term
    }

quoted_term
  = '"' term:(('\\"' / [^"])* "") ('"' / #error{ "Unterminated quoted string" })
    {
        term
    }

regex_term
  = '/' term:(('\\/' / [^/])+ "") ('/' / #error{ "Unterminated regex" })
    {
        term
    }

boost_modifier<string>
  = '^' boost:(quoted_term / unquoted_term)
    {
        boost
    }

proximity_modifier<string>
  = '~' proximity:(unquoted_term? "")
    {
        proximity
    }

range_operator_exp<TermRangeNode>
  = '[' _* term_min:range_unquoted_term delim:range_delimiter_exp term_max:range_unquoted_term _* ']' proximity:proximity_modifier? boost:boost_modifier?
    {{
        var result = new TermRangeNode {
            Min = term_min,
            Max = term_max,
            MinInclusive = true,
            MaxInclusive = true,
            Delimiter = delim
        };

        if (proximity.Count > 0)
            result.Proximity = proximity.SingleOrDefault();

        if (boost.Count > 0)
            result.Boost = boost.SingleOrDefault();

        return result;
    }}
  / '{' _* term_min:range_unquoted_term delim:range_delimiter_exp term_max:range_unquoted_term _* '}' proximity:proximity_modifier? boost:boost_modifier?
    {{
        var result = new TermRangeNode {
            Min = term_min,
            Max = term_max,
            MinInclusive = false,
            MaxInclusive = false,
            Delimiter = delim
        };

        if (proximity.Count > 0)
            result.Proximity = proximity.SingleOrDefault();

        if (boost.Count > 0)
            result.Boost = boost.SingleOrDefault();

        return result;
    }}
  / '{' _* term_min:range_unquoted_term delim:range_delimiter_exp term_max:range_unquoted_term _* ']' proximity:proximity_modifier? boost:boost_modifier?
    {{
        var result = new TermRangeNode {
            Min = term_min,
            Max = term_max,
            MinInclusive = false,
            MaxInclusive = true,
            Delimiter = delim
        };

        if (proximity.Count > 0)
            result.Proximity = proximity.SingleOrDefault();

        if (boost.Count > 0)
            result.Boost = boost.SingleOrDefault();

        return result;
    }}
  / '[' _* term_min:range_unquoted_term delim:range_delimiter_exp term_max:range_unquoted_term _* '}' proximity:proximity_modifier? boost:boost_modifier?
    {{
        var result = new TermRangeNode {
            Min = term_min,
            Max = term_max,
            MinInclusive = true,
            MaxInclusive = false,
            Delimiter = delim
        };

        if (proximity.Count > 0)
            result.Proximity = proximity.SingleOrDefault();

        if (boost.Count > 0)
            result.Boost = boost.SingleOrDefault();

        return result;
    }}
  / '>=' _* term_min:range_unquoted_term proximity:proximity_modifier? boost:boost_modifier?
    {{
        var result = new TermRangeNode {
            Min = term_min,
            MinInclusive = true,
            Operator = ">="
        };

        if (proximity.Count > 0)
            result.Proximity = proximity.SingleOrDefault();

        if (boost.Count > 0)
            result.Boost = boost.SingleOrDefault();

        return result;
    }}
  / '>' _* term_min:range_unquoted_term proximity:proximity_modifier? boost:boost_modifier?
    {{
        var result = new TermRangeNode {
            Min = term_min,
            MinInclusive = false,
            Operator = ">"
        };

        if (proximity.Count > 0)
            result.Proximity = proximity.SingleOrDefault();

        if (boost.Count > 0)
            result.Boost = boost.SingleOrDefault();

        return result;
    }}
  / '<=' _* term_max:range_unquoted_term proximity:proximity_modifier? boost:boost_modifier?
    {{
        var result = new TermRangeNode {
            Max = term_max,
            MaxInclusive = true,
            Operator = "<="
        };

        if (proximity.Count > 0)
            result.Proximity = proximity.SingleOrDefault();

        if (boost.Count > 0)
            result.Boost = boost.SingleOrDefault();

        return result;
    }}
  / '<' _* term_max:range_unquoted_term proximity:proximity_modifier? boost:boost_modifier?
    {{
        var result = new TermRangeNode {
            Max = term_max,
            MaxInclusive = false,
            Operator = "<"
        };

        if (proximity.Count > 0)
            result.Proximity = proximity.SingleOrDefault();

        if (boost.Count > 0)
            result.Boost = boost.SingleOrDefault();

        return result;
    }}

range_delimiter_exp -lexical
  = _+ 'TO' _+
  / _* '..' _*

not_exp
  = 'NOT' _+

operator_exp<GroupOperator>
  = _* op:operator _+
    {
        op
    }

operator<GroupOperator> -lexical
  = "OR" { GroupOperator.Or }
  / "AND"{ GroupOperator.And }
  / "||" { GroupOperator.Or }
  / "&&" { GroupOperator.And }

prefix_operator_exp
  = _* op:prefix_operator
    {
        op
    }

prefix_operator -lexical
  = '+'
  / '-'

_
  = [ \t\r\n\f]+

EOF
  = !.
  / unexpected:. #error{ "Unexpected character '" + unexpected + "'." }
