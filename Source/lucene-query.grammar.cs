// -----------------------------------------------------------------------
// <auto-generated>
//   This code was generated by Pegasus 3.1.0.0
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------

namespace
#line 1 "lucene-query.grammar"
            Exceptionless.LuceneQueryParser
#line default
{
    using System;
    using System.Collections.Generic;
    using Pegasus.Common;
    using
        #line 3 "lucene-query.grammar"
       System.Linq
        #line default
        ;
    using
        #line 4 "lucene-query.grammar"
       Exceptionless.LuceneQueryParser.Nodes
        #line default
        ;

    /// <summary>
    ///  Parses a string according to the rules of the <see cref="QueryParser" /> grammar.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Pegasus", "3.1.0.0")]
    public
    partial class
    #line 2 "lucene-query.grammar"
           QueryParser
    #line default
    {

        /// <summary>
        ///  Parses a string according to the rules of the <see cref="QueryParser" /> grammar.
        /// </summary>
        /// <param name="subject">The parsing subject.</param>
        /// <param name="fileName">The optional file name to use in error messages.</param>
        /// <returns>The <see cref="QueryGroup" /> parsed from <paramref name="subject" />.</returns>
        /// <exception cref="FormatException">
        ///  Thrown when parsing fails against <paramref name="subject"/>.  The exception's <code>Data["cursor"]</code> will be set with the cursor where the fatal error occurred.
        /// </exception>
        public QueryGroup Parse(string subject, string fileName = null)
        {
            var cursor = new Cursor(subject, 0, fileName);
            var result = this.start(ref cursor);
            if (result == null)
            {
                throw ExceptionHelper(cursor, state => "Failed to parse 'start'.");
            }
            return result.Value;
        }

        private IParseResult<
            #line 6 "lucene-query.grammar"
      QueryGroup
            #line default
            > start(ref Cursor cursor)
        {
            IParseResult<QueryGroup> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<IList<IList<string>>> r1 = null;
                var startCursor1 = cursor;
                var l0 = new List<IList<string>>();
                while (true)
                {
                    IParseResult<IList<string>> r2 = null;
                    r2 = this._(ref cursor);
                    if (r2 != null)
                    {
                        l0.Add(r2.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r1 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r1 != null)
                {
                    IParseResult<IList<QueryGroup>> r3 = null;
                    var nodeStart = cursor;
                    var startCursor2 = cursor;
                    var l1 = new List<QueryGroup>();
                    while (true)
                    {
                        IParseResult<QueryGroup> r4 = null;
                        r4 = this.node(ref cursor);
                        if (r4 != null)
                        {
                            l1.Add(r4.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (l1.Count >= 1)
                    {
                        r3 = this.ReturnHelper<IList<QueryGroup>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                    var nodeEnd = cursor;
                    var node = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        r0 = this.ReturnHelper<QueryGroup>(startCursor0, ref cursor, state =>
                            #line 8 "lucene-query.grammar"
     
        node[0]
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor3 = cursor;
                IParseResult<IList<IList<string>>> r5 = null;
                var startCursor4 = cursor;
                var l2 = new List<IList<string>>();
                while (true)
                {
                    IParseResult<IList<string>> r6 = null;
                    r6 = this._(ref cursor);
                    if (r6 != null)
                    {
                        l2.Add(r6.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r5 = this.ReturnHelper<IList<IList<string>>>(startCursor4, ref cursor, state => l2.AsReadOnly());
                if (r5 != null)
                {
                    r0 = this.ReturnHelper<QueryGroup>(startCursor3, ref cursor, state =>
                        #line 12 "lucene-query.grammar"
     
        new QueryGroup()
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor3;
                }
            }
            if (r0 == null)
            {
                var startCursor5 = cursor;
                IParseResult<string> r7 = null;
                r7 = this.EOF(ref cursor);
                if (r7 != null)
                {
                    r0 = this.ReturnHelper<QueryGroup>(startCursor5, ref cursor, state =>
                        #line 16 "lucene-query.grammar"
     
        new QueryGroup()
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor5;
                }
            }
            return r0;
        }

        private IParseResult<
            #line 20 "lucene-query.grammar"
     QueryGroup
            #line default
            > node(ref Cursor cursor)
        {
            IParseResult<QueryGroup> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                var opStart = cursor;
                r1 = this.operator_exp(ref cursor);
                var opEnd = cursor;
                var op = ValueOrDefault(r1);
                if (r1 != null)
                {
                    IParseResult<string> r2 = null;
                    r2 = this.EOF(ref cursor);
                    if (r2 != null)
                    {
                        r0 = this.ReturnHelper<QueryGroup>(startCursor0, ref cursor, state =>
                            #line 22 "lucene-query.grammar"
     
        new QueryGroup {
            Operator = op
        }
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<string> r3 = null;
                var opStart = cursor;
                r3 = this.operator_exp(ref cursor);
                var opEnd = cursor;
                var op = ValueOrDefault(r3);
                if (r3 != null)
                {
                    IParseResult<QueryGroup> r4 = null;
                    var rightStart = cursor;
                    r4 = this.node(ref cursor);
                    var rightEnd = cursor;
                    var right = ValueOrDefault(r4);
                    if (r4 != null)
                    {
                        r0 = this.ReturnHelper<QueryGroup>(startCursor1, ref cursor, state =>
                            #line 28 "lucene-query.grammar"
     
        right
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            if (r0 == null)
            {
                var startCursor2 = cursor;
                IParseResult<QueryNode> r5 = null;
                var leftStart = cursor;
                r5 = this.group_exp(ref cursor);
                var leftEnd = cursor;
                var left = ValueOrDefault(r5);
                if (r5 != null)
                {
                    IParseResult<string> r6 = null;
                    var opStart = cursor;
                    var startCursor3 = cursor;
                    IParseResult<IList<string>> r7 = null;
                    var startCursor4 = cursor;
                    var l0 = new List<string>();
                    while (true)
                    {
                        IParseResult<string> r8 = null;
                        r8 = this.operator_exp(ref cursor);
                        if (r8 != null)
                        {
                            l0.Add(r8.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r7 = this.ReturnHelper<IList<string>>(startCursor4, ref cursor, state => l0.AsReadOnly());
                    if (r7 != null)
                    {
                        IParseResult<string> r9 = null;
                        r9 = this.ParseLiteral(ref cursor, "");
                        if (r9 != null)
                        {
                            {
                                var len = cursor.Location - startCursor3.Location;
                                r6 = this.ReturnHelper<string>(startCursor3, ref cursor, state =>
                                    state.Subject.Substring(startCursor3.Location, len)
                                    );
                            }
                        }
                        else
                        {
                            cursor = startCursor3;
                        }
                    }
                    else
                    {
                        cursor = startCursor3;
                    }
                    var opEnd = cursor;
                    var op = ValueOrDefault(r6);
                    if (r6 != null)
                    {
                        IParseResult<IList<QueryGroup>> r10 = null;
                        var rightStart = cursor;
                        var startCursor5 = cursor;
                        var l1 = new List<QueryGroup>();
                        while (true)
                        {
                            IParseResult<QueryGroup> r11 = null;
                            r11 = this.node(ref cursor);
                            if (r11 != null)
                            {
                                l1.Add(r11.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        r10 = this.ReturnHelper<IList<QueryGroup>>(startCursor5, ref cursor, state => l1.AsReadOnly());
                        var rightEnd = cursor;
                        var right = ValueOrDefault(r10);
                        if (r10 != null)
                        {
                            r0 = this.ReturnHelper<QueryGroup>(startCursor2, ref cursor, state =>
                                #line 32 "lucene-query.grammar"
     {
        var node= new QueryGroup {
            Left = left
        };

        var rightExp =
                right.Count == 0
                ? (QueryExpression)null
                : right[0].Right == null
                    ? right[0].Left
                    : right[0];

        if (rightExp != null)
        {
            node.Operator = op == "" ? "OR" : op.Trim();
            node.Right = rightExp;
        }

        return node;
    }
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor2;
                        }
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                }
                else
                {
                    cursor = startCursor2;
                }
            }
            return r0;
        }

        private IParseResult<
            #line 53 "lucene-query.grammar"
          QueryNode
            #line default
            > group_exp(ref Cursor cursor)
        {
            IParseResult<QueryNode> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<QueryNode> r1 = null;
                var field_expStart = cursor;
                r1 = this.field_exp(ref cursor);
                var field_expEnd = cursor;
                var field_exp = ValueOrDefault(r1);
                if (r1 != null)
                {
                    IParseResult<IList<IList<string>>> r2 = null;
                    var startCursor1 = cursor;
                    var l0 = new List<IList<string>>();
                    while (true)
                    {
                        IParseResult<IList<string>> r3 = null;
                        r3 = this._(ref cursor);
                        if (r3 != null)
                        {
                            l0.Add(r3.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r2 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                    if (r2 != null)
                    {
                        r0 = this.ReturnHelper<QueryNode>(startCursor0, ref cursor, state =>
                            #line 55 "lucene-query.grammar"
     
        field_exp
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                r0 = this.paren_exp(ref cursor);
            }
            return r0;
        }

        private IParseResult<
            #line 60 "lucene-query.grammar"
          QueryGroup
            #line default
            > paren_exp(ref Cursor cursor)
        {
            IParseResult<QueryGroup> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "(");
            if (r1 != null)
            {
                IParseResult<IList<QueryGroup>> r2 = null;
                var nodeStart = cursor;
                var startCursor1 = cursor;
                var l0 = new List<QueryGroup>();
                while (true)
                {
                    IParseResult<QueryGroup> r3 = null;
                    r3 = this.node(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l0.Count >= 1)
                {
                    r2 = this.ReturnHelper<IList<QueryGroup>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                }
                else
                {
                    cursor = startCursor1;
                }
                var nodeEnd = cursor;
                var node = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.ParseLiteral(ref cursor, ")");
                    if (r4 != null)
                    {
                        IParseResult<IList<IList<string>>> r5 = null;
                        var startCursor2 = cursor;
                        var l1 = new List<IList<string>>();
                        while (true)
                        {
                            IParseResult<IList<string>> r6 = null;
                            r6 = this._(ref cursor);
                            if (r6 != null)
                            {
                                l1.Add(r6.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        r5 = this.ReturnHelper<IList<IList<string>>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                        if (r5 != null)
                        {
                            r0 = this.ReturnHelper<QueryGroup>(startCursor0, ref cursor, state =>
                                #line 62 "lucene-query.grammar"
     
        node[0]
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 66 "lucene-query.grammar"
          QueryNode
            #line default
            > field_exp(ref Cursor cursor)
        {
            IParseResult<QueryNode> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<IList<FieldExpression>> r1 = null;
                var nameStart = cursor;
                var startCursor1 = cursor;
                var l0 = new List<FieldExpression>();
                while (l0.Count < 1)
                {
                    IParseResult<FieldExpression> r2 = null;
                    r2 = this.fieldname(ref cursor);
                    if (r2 != null)
                    {
                        l0.Add(r2.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r1 = this.ReturnHelper<IList<FieldExpression>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                var nameEnd = cursor;
                var name = ValueOrDefault(r1);
                if (r1 != null)
                {
                    IParseResult<QueryExpression> r3 = null;
                    var rangeStart = cursor;
                    r3 = this.range_operator_exp(ref cursor);
                    var rangeEnd = cursor;
                    var range = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        r0 = this.ReturnHelper<QueryNode>(startCursor0, ref cursor, state =>
                            #line 68 "lucene-query.grammar"
     {
        range.Field = name.Count > 0 ? name[0] : new FieldExpression { 
            Field = "<implicit>"
        };

        return range;
    }
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor2 = cursor;
                IParseResult<FieldExpression> r4 = null;
                var nameStart = cursor;
                r4 = this.fieldname(ref cursor);
                var nameEnd = cursor;
                var name = ValueOrDefault(r4);
                if (r4 != null)
                {
                    IParseResult<QueryGroup> r5 = null;
                    var nodeStart = cursor;
                    r5 = this.paren_exp(ref cursor);
                    var nodeEnd = cursor;
                    var node = ValueOrDefault(r5);
                    if (r5 != null)
                    {
                        r0 = this.ReturnHelper<QueryNode>(startCursor2, ref cursor, state =>
                            #line 76 "lucene-query.grammar"
     {
        node.Field = name;
        return node;
    }
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                }
                else
                {
                    cursor = startCursor2;
                }
            }
            if (r0 == null)
            {
                var startCursor3 = cursor;
                IParseResult<IList<FieldExpression>> r6 = null;
                var nameStart = cursor;
                var startCursor4 = cursor;
                var l1 = new List<FieldExpression>();
                while (l1.Count < 1)
                {
                    IParseResult<FieldExpression> r7 = null;
                    r7 = this.fieldname(ref cursor);
                    if (r7 != null)
                    {
                        l1.Add(r7.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r6 = this.ReturnHelper<IList<FieldExpression>>(startCursor4, ref cursor, state => l1.AsReadOnly());
                var nameEnd = cursor;
                var name = ValueOrDefault(r6);
                if (r6 != null)
                {
                    IParseResult<QueryExpression> r8 = null;
                    var termStart = cursor;
                    r8 = this.term(ref cursor);
                    var termEnd = cursor;
                    var term = ValueOrDefault(r8);
                    if (r8 != null)
                    {
                        r0 = this.ReturnHelper<QueryNode>(startCursor3, ref cursor, state =>
                            #line 81 "lucene-query.grammar"
     {
        var query = new QueryExpression {
            Field = name.Count > 0 ? name[0] : new FieldExpression {
                Field = "<implicit>"
            }
        };

        term.CopyTo(query);

        return query;
    }
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor3;
                    }
                }
                else
                {
                    cursor = startCursor3;
                }
            }
            return r0;
        }

        private IParseResult<
            #line 93 "lucene-query.grammar"
          FieldExpression
            #line default
            > fieldname(ref Cursor cursor)
        {
            IParseResult<FieldExpression> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            var opStart = cursor;
            var startCursor1 = cursor;
            var l0 = new List<string>();
            while (l0.Count < 1)
            {
                IParseResult<string> r2 = null;
                r2 = this.prefix_operator_exp(ref cursor);
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    break;
                }
            }
            r1 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
            var opEnd = cursor;
            var op = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<string> r3 = null;
                var fieldnameStart = cursor;
                r3 = this.unquoted_term(ref cursor);
                var fieldnameEnd = cursor;
                var fieldname = ValueOrDefault(r3);
                if (r3 != null)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.ParseClass(ref cursor, "::");
                    if (r4 != null)
                    {
                        r0 = this.ReturnHelper<FieldExpression>(startCursor0, ref cursor, state =>
                            #line 95 "lucene-query.grammar"
       {
        var result = new FieldExpression { Field = fieldname };

        result.Prefix = op.SingleOrDefault();

        return result;
    }
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 103 "lucene-query.grammar"
     QueryExpression
            #line default
            > term(ref Cursor cursor)
        {
            IParseResult<QueryExpression> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<IList<string>> r1 = null;
                var opStart = cursor;
                var startCursor1 = cursor;
                var l0 = new List<string>();
                while (l0.Count < 1)
                {
                    IParseResult<string> r2 = null;
                    r2 = this.prefix_operator_exp(ref cursor);
                    if (r2 != null)
                    {
                        l0.Add(r2.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r1 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                var opEnd = cursor;
                var op = ValueOrDefault(r1);
                if (r1 != null)
                {
                    IParseResult<string> r3 = null;
                    var termStart = cursor;
                    r3 = this.quoted_term(ref cursor);
                    var termEnd = cursor;
                    var term = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        IParseResult<IList<double>> r4 = null;
                        var proximityStart = cursor;
                        var startCursor2 = cursor;
                        var l1 = new List<double>();
                        while (l1.Count < 1)
                        {
                            IParseResult<double> r5 = null;
                            r5 = this.proximity_modifier(ref cursor);
                            if (r5 != null)
                            {
                                l1.Add(r5.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        r4 = this.ReturnHelper<IList<double>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                        var proximityEnd = cursor;
                        var proximity = ValueOrDefault(r4);
                        if (r4 != null)
                        {
                            IParseResult<IList<double>> r6 = null;
                            var boostStart = cursor;
                            var startCursor3 = cursor;
                            var l2 = new List<double>();
                            while (l2.Count < 1)
                            {
                                IParseResult<double> r7 = null;
                                r7 = this.boost_modifier(ref cursor);
                                if (r7 != null)
                                {
                                    l2.Add(r7.Value);
                                }
                                else
                                {
                                    break;
                                }
                            }
                            r6 = this.ReturnHelper<IList<double>>(startCursor3, ref cursor, state => l2.AsReadOnly());
                            var boostEnd = cursor;
                            var boost = ValueOrDefault(r6);
                            if (r6 != null)
                            {
                                IParseResult<IList<IList<string>>> r8 = null;
                                var startCursor4 = cursor;
                                var l3 = new List<IList<string>>();
                                while (true)
                                {
                                    IParseResult<IList<string>> r9 = null;
                                    r9 = this._(ref cursor);
                                    if (r9 != null)
                                    {
                                        l3.Add(r9.Value);
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                r8 = this.ReturnHelper<IList<IList<string>>>(startCursor4, ref cursor, state => l3.AsReadOnly());
                                if (r8 != null)
                                {
                                    r0 = this.ReturnHelper<QueryExpression>(startCursor0, ref cursor, state =>
                                        #line 105 "lucene-query.grammar"
       {
        var result = new QueryExpression { Term = term };

        if (proximity.Count > 0)
            result.Proximity = proximity.SingleOrDefault();

        if (boost.Count > 0)
            result.Boost = boost.SingleOrDefault();

        result.Prefix = op.SingleOrDefault();

        return result;
    }
                                        #line default
                                        );
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor5 = cursor;
                IParseResult<IList<string>> r10 = null;
                var opStart = cursor;
                var startCursor6 = cursor;
                var l4 = new List<string>();
                while (l4.Count < 1)
                {
                    IParseResult<string> r11 = null;
                    r11 = this.prefix_operator_exp(ref cursor);
                    if (r11 != null)
                    {
                        l4.Add(r11.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r10 = this.ReturnHelper<IList<string>>(startCursor6, ref cursor, state => l4.AsReadOnly());
                var opEnd = cursor;
                var op = ValueOrDefault(r10);
                if (r10 != null)
                {
                    IParseResult<string> r12 = null;
                    var termStart = cursor;
                    r12 = this.unquoted_term(ref cursor);
                    var termEnd = cursor;
                    var term = ValueOrDefault(r12);
                    if (r12 != null)
                    {
                        IParseResult<IList<double>> r13 = null;
                        var similarityStart = cursor;
                        var startCursor7 = cursor;
                        var l5 = new List<double>();
                        while (l5.Count < 1)
                        {
                            IParseResult<double> r14 = null;
                            r14 = this.fuzzy_modifier(ref cursor);
                            if (r14 != null)
                            {
                                l5.Add(r14.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        r13 = this.ReturnHelper<IList<double>>(startCursor7, ref cursor, state => l5.AsReadOnly());
                        var similarityEnd = cursor;
                        var similarity = ValueOrDefault(r13);
                        if (r13 != null)
                        {
                            IParseResult<IList<double>> r15 = null;
                            var boostStart = cursor;
                            var startCursor8 = cursor;
                            var l6 = new List<double>();
                            while (l6.Count < 1)
                            {
                                IParseResult<double> r16 = null;
                                r16 = this.boost_modifier(ref cursor);
                                if (r16 != null)
                                {
                                    l6.Add(r16.Value);
                                }
                                else
                                {
                                    break;
                                }
                            }
                            r15 = this.ReturnHelper<IList<double>>(startCursor8, ref cursor, state => l6.AsReadOnly());
                            var boostEnd = cursor;
                            var boost = ValueOrDefault(r15);
                            if (r15 != null)
                            {
                                IParseResult<IList<IList<string>>> r17 = null;
                                var startCursor9 = cursor;
                                var l7 = new List<IList<string>>();
                                while (true)
                                {
                                    IParseResult<IList<string>> r18 = null;
                                    r18 = this._(ref cursor);
                                    if (r18 != null)
                                    {
                                        l7.Add(r18.Value);
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                r17 = this.ReturnHelper<IList<IList<string>>>(startCursor9, ref cursor, state => l7.AsReadOnly());
                                if (r17 != null)
                                {
                                    r0 = this.ReturnHelper<QueryExpression>(startCursor5, ref cursor, state =>
                                        #line 119 "lucene-query.grammar"
     {
        var result = new QueryExpression { Term = term };

        if (similarity.Count > 0)
            result.Similarity = similarity.SingleOrDefault();

        if (boost.Count > 0)
            result.Boost = boost.SingleOrDefault();

        result.Prefix = op.SingleOrDefault();

        return result;
    }
                                        #line default
                                        );
                                }
                                else
                                {
                                    cursor = startCursor5;
                                }
                            }
                            else
                            {
                                cursor = startCursor5;
                            }
                        }
                        else
                        {
                            cursor = startCursor5;
                        }
                    }
                    else
                    {
                        cursor = startCursor5;
                    }
                }
                else
                {
                    cursor = startCursor5;
                }
            }
            return r0;
        }

        private IParseResult<string> unquoted_term(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var termStart = cursor;
            var startCursor1 = cursor;
            IParseResult<IList<string>> r2 = null;
            var startCursor2 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r3 = null;
                r3 = this.ParseClass(ref cursor, "::  \t\t\r\r\n\n\f\f{{}}(())\"\"++--//^^~~[[]]", negated: true);
                if (r3 != null)
                {
                    l0.Add(r3.Value);
                }
                else
                {
                    break;
                }
            }
            if (l0.Count >= 1)
            {
                r2 = this.ReturnHelper<IList<string>>(startCursor2, ref cursor, state => l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor2;
            }
            if (r2 != null)
            {
                IParseResult<string> r4 = null;
                r4 = this.ParseLiteral(ref cursor, "");
                if (r4 != null)
                {
                    {
                        var len = cursor.Location - startCursor1.Location;
                        r1 = this.ReturnHelper<string>(startCursor1, ref cursor, state =>
                            state.Subject.Substring(startCursor1.Location, len)
                            );
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            var termEnd = cursor;
            var term = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                    #line 135 "lucene-query.grammar"
     
        term
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> quoted_term(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "\"");
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                var termStart = cursor;
                r2 = this.ParseLiteral(ref cursor, "");
                var termEnd = cursor;
                var term = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<IList<string>> r3 = null;
                    var startCursor1 = cursor;
                    var l0 = new List<string>();
                    while (true)
                    {
                        IParseResult<string> r4 = null;
                        r4 = this.ParseClass(ref cursor, "\"\"", negated: true);
                        if (r4 != null)
                        {
                            l0.Add(r4.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (l0.Count >= 1)
                    {
                        r3 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                    if (r3 != null)
                    {
                        IParseResult<string> r5 = null;
                        r5 = this.ParseLiteral(ref cursor, "\"");
                        if (r5 != null)
                        {
                            r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                #line 141 "lucene-query.grammar"
     
        term
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 145 "lucene-query.grammar"
                   double
            #line default
            > proximity_modifier(ref Cursor cursor)
        {
            IParseResult<double> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "~");
            if (r1 != null)
            {
                IParseResult<double> r2 = null;
                var proximityStart = cursor;
                r2 = this.int_exp(ref cursor);
                var proximityEnd = cursor;
                var proximity = ValueOrDefault(r2);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<double>(startCursor0, ref cursor, state =>
                        #line 147 "lucene-query.grammar"
     
        proximity
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 151 "lucene-query.grammar"
               double
            #line default
            > boost_modifier(ref Cursor cursor)
        {
            IParseResult<double> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "^");
            if (r1 != null)
            {
                IParseResult<double> r2 = null;
                var boostStart = cursor;
                r2 = this.decimal_or_int_exp(ref cursor);
                var boostEnd = cursor;
                var boost = ValueOrDefault(r2);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<double>(startCursor0, ref cursor, state =>
                        #line 153 "lucene-query.grammar"
     
        boost
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 157 "lucene-query.grammar"
               double
            #line default
            > fuzzy_modifier(ref Cursor cursor)
        {
            IParseResult<double> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "~");
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                var fuzzinessStart = cursor;
                r2 = this.ParseLiteral(ref cursor, "");
                var fuzzinessEnd = cursor;
                var fuzziness = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<IList<double>> r3 = null;
                    var startCursor1 = cursor;
                    var l0 = new List<double>();
                    while (l0.Count < 1)
                    {
                        IParseResult<double> r4 = null;
                        r4 = this.decimal_exp(ref cursor);
                        if (r4 != null)
                        {
                            l0.Add(r4.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r3 = this.ReturnHelper<IList<double>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                    if (r3 != null)
                    {
                        r0 = this.ReturnHelper<double>(startCursor0, ref cursor, state =>
                            #line 159 "lucene-query.grammar"
     
        fuzziness == "" ? 0.5 : Double.Parse(fuzziness)
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 163 "lucene-query.grammar"
                   double
            #line default
            > decimal_or_int_exp(ref Cursor cursor)
        {
            IParseResult<double> r0 = null;
            if (r0 == null)
            {
                r0 = this.decimal_exp(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.int_exp(ref cursor);
            }
            return r0;
        }

        private IParseResult<
            #line 167 "lucene-query.grammar"
            double
            #line default
            > decimal_exp(ref Cursor cursor)
        {
            IParseResult<double> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "0.");
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                var valStart = cursor;
                r2 = this.ParseLiteral(ref cursor, "");
                var valEnd = cursor;
                var val = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<IList<string>> r3 = null;
                    var startCursor1 = cursor;
                    var l0 = new List<string>();
                    while (true)
                    {
                        IParseResult<string> r4 = null;
                        r4 = this.ParseClass(ref cursor, "09");
                        if (r4 != null)
                        {
                            l0.Add(r4.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (l0.Count >= 1)
                    {
                        r3 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                    if (r3 != null)
                    {
                        r0 = this.ReturnHelper<double>(startCursor0, ref cursor, state =>
                            #line 169 "lucene-query.grammar"
     
        Double.Parse("0." + val)
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 173 "lucene-query.grammar"
        double
            #line default
            > int_exp(ref Cursor cursor)
        {
            IParseResult<double> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var valStart = cursor;
            r1 = this.ParseLiteral(ref cursor, "");
            var valEnd = cursor;
            var val = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.ParseClass(ref cursor, "09");
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l0.Count >= 1)
                {
                    r2 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                }
                else
                {
                    cursor = startCursor1;
                }
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<double>(startCursor0, ref cursor, state =>
                        #line 175 "lucene-query.grammar"
     
        Double.Parse(val)
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 179 "lucene-query.grammar"
                   QueryExpression
            #line default
            > range_operator_exp(ref Cursor cursor)
        {
            IParseResult<QueryExpression> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.ParseLiteral(ref cursor, "[");
                if (r1 != null)
                {
                    IParseResult<string> r2 = null;
                    var term_minStart = cursor;
                    r2 = this.unquoted_term(ref cursor);
                    var term_minEnd = cursor;
                    var term_min = ValueOrDefault(r2);
                    if (r2 != null)
                    {
                        IParseResult<IList<IList<string>>> r3 = null;
                        var startCursor1 = cursor;
                        var l0 = new List<IList<string>>();
                        while (true)
                        {
                            IParseResult<IList<string>> r4 = null;
                            r4 = this._(ref cursor);
                            if (r4 != null)
                            {
                                l0.Add(r4.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        r3 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                        if (r3 != null)
                        {
                            IParseResult<string> r5 = null;
                            r5 = this.ParseLiteral(ref cursor, "TO");
                            if (r5 != null)
                            {
                                IParseResult<IList<IList<string>>> r6 = null;
                                var startCursor2 = cursor;
                                var l1 = new List<IList<string>>();
                                while (true)
                                {
                                    IParseResult<IList<string>> r7 = null;
                                    r7 = this._(ref cursor);
                                    if (r7 != null)
                                    {
                                        l1.Add(r7.Value);
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                if (l1.Count >= 1)
                                {
                                    r6 = this.ReturnHelper<IList<IList<string>>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                                }
                                else
                                {
                                    cursor = startCursor2;
                                }
                                if (r6 != null)
                                {
                                    IParseResult<string> r8 = null;
                                    var term_maxStart = cursor;
                                    r8 = this.unquoted_term(ref cursor);
                                    var term_maxEnd = cursor;
                                    var term_max = ValueOrDefault(r8);
                                    if (r8 != null)
                                    {
                                        IParseResult<string> r9 = null;
                                        r9 = this.ParseLiteral(ref cursor, "]");
                                        if (r9 != null)
                                        {
                                            r0 = this.ReturnHelper<QueryExpression>(startCursor0, ref cursor, state =>
                                                #line 181 "lucene-query.grammar"
     
        new QueryExpression {
            TermMin = term_min,
            TermMax = term_max,
            Inclusive = true
        }
                                                #line default
                                                );
                                        }
                                        else
                                        {
                                            cursor = startCursor0;
                                        }
                                    }
                                    else
                                    {
                                        cursor = startCursor0;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor3 = cursor;
                IParseResult<string> r10 = null;
                r10 = this.ParseLiteral(ref cursor, "{");
                if (r10 != null)
                {
                    IParseResult<string> r11 = null;
                    var term_minStart = cursor;
                    r11 = this.unquoted_term(ref cursor);
                    var term_minEnd = cursor;
                    var term_min = ValueOrDefault(r11);
                    if (r11 != null)
                    {
                        IParseResult<IList<IList<string>>> r12 = null;
                        var startCursor4 = cursor;
                        var l2 = new List<IList<string>>();
                        while (true)
                        {
                            IParseResult<IList<string>> r13 = null;
                            r13 = this._(ref cursor);
                            if (r13 != null)
                            {
                                l2.Add(r13.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        r12 = this.ReturnHelper<IList<IList<string>>>(startCursor4, ref cursor, state => l2.AsReadOnly());
                        if (r12 != null)
                        {
                            IParseResult<string> r14 = null;
                            r14 = this.ParseLiteral(ref cursor, "TO");
                            if (r14 != null)
                            {
                                IParseResult<IList<IList<string>>> r15 = null;
                                var startCursor5 = cursor;
                                var l3 = new List<IList<string>>();
                                while (true)
                                {
                                    IParseResult<IList<string>> r16 = null;
                                    r16 = this._(ref cursor);
                                    if (r16 != null)
                                    {
                                        l3.Add(r16.Value);
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                if (l3.Count >= 1)
                                {
                                    r15 = this.ReturnHelper<IList<IList<string>>>(startCursor5, ref cursor, state => l3.AsReadOnly());
                                }
                                else
                                {
                                    cursor = startCursor5;
                                }
                                if (r15 != null)
                                {
                                    IParseResult<string> r17 = null;
                                    var term_maxStart = cursor;
                                    r17 = this.unquoted_term(ref cursor);
                                    var term_maxEnd = cursor;
                                    var term_max = ValueOrDefault(r17);
                                    if (r17 != null)
                                    {
                                        IParseResult<string> r18 = null;
                                        r18 = this.ParseLiteral(ref cursor, "}");
                                        if (r18 != null)
                                        {
                                            r0 = this.ReturnHelper<QueryExpression>(startCursor3, ref cursor, state =>
                                                #line 189 "lucene-query.grammar"
     
        new QueryExpression {
            TermMin = term_min,
            TermMax = term_max,
            Inclusive = false
        }
                                                #line default
                                                );
                                        }
                                        else
                                        {
                                            cursor = startCursor3;
                                        }
                                    }
                                    else
                                    {
                                        cursor = startCursor3;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor3;
                                }
                            }
                            else
                            {
                                cursor = startCursor3;
                            }
                        }
                        else
                        {
                            cursor = startCursor3;
                        }
                    }
                    else
                    {
                        cursor = startCursor3;
                    }
                }
                else
                {
                    cursor = startCursor3;
                }
            }
            return r0;
        }

        private IParseResult<string> operator_exp(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<IList<IList<string>>> r1 = null;
                var startCursor1 = cursor;
                var l0 = new List<IList<string>>();
                while (true)
                {
                    IParseResult<IList<string>> r2 = null;
                    r2 = this._(ref cursor);
                    if (r2 != null)
                    {
                        l0.Add(r2.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r1 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r1 != null)
                {
                    IParseResult<string> r3 = null;
                    var opStart = cursor;
                    r3 = this.@operator(ref cursor);
                    var opEnd = cursor;
                    var op = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        IParseResult<IList<IList<string>>> r4 = null;
                        var startCursor2 = cursor;
                        var l1 = new List<IList<string>>();
                        while (true)
                        {
                            IParseResult<IList<string>> r5 = null;
                            r5 = this._(ref cursor);
                            if (r5 != null)
                            {
                                l1.Add(r5.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        if (l1.Count >= 1)
                        {
                            r4 = this.ReturnHelper<IList<IList<string>>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                        }
                        else
                        {
                            cursor = startCursor2;
                        }
                        if (r4 != null)
                        {
                            r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                #line 199 "lucene-query.grammar"
     
        op
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor3 = cursor;
                IParseResult<IList<IList<string>>> r6 = null;
                var startCursor4 = cursor;
                var l2 = new List<IList<string>>();
                while (true)
                {
                    IParseResult<IList<string>> r7 = null;
                    r7 = this._(ref cursor);
                    if (r7 != null)
                    {
                        l2.Add(r7.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r6 = this.ReturnHelper<IList<IList<string>>>(startCursor4, ref cursor, state => l2.AsReadOnly());
                if (r6 != null)
                {
                    IParseResult<string> r8 = null;
                    var opStart = cursor;
                    r8 = this.@operator(ref cursor);
                    var opEnd = cursor;
                    var op = ValueOrDefault(r8);
                    if (r8 != null)
                    {
                        IParseResult<string> r9 = null;
                        r9 = this.EOF(ref cursor);
                        if (r9 != null)
                        {
                            r0 = this.ReturnHelper<string>(startCursor3, ref cursor, state =>
                                #line 203 "lucene-query.grammar"
     
        op
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor3;
                        }
                    }
                    else
                    {
                        cursor = startCursor3;
                    }
                }
                else
                {
                    cursor = startCursor3;
                }
            }
            return r0;
        }

        private IParseResult<string> @operator(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "OR");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "AND");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "NOT");
            }
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.ParseLiteral(ref cursor, "||");
                if (r1 != null)
                {
                    r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                        #line 211 "lucene-query.grammar"
           "OR"
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<string> r2 = null;
                r2 = this.ParseLiteral(ref cursor, "&&");
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<string>(startCursor1, ref cursor, state =>
                        #line 212 "lucene-query.grammar"
           "AND"
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            return r0;
        }

        private IParseResult<string> prefix_operator_exp(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<IList<string>>> r1 = null;
            var startCursor1 = cursor;
            var l0 = new List<IList<string>>();
            while (true)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this._(ref cursor);
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    break;
                }
            }
            r1 = this.ReturnHelper<IList<IList<string>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
            if (r1 != null)
            {
                IParseResult<string> r3 = null;
                var opStart = cursor;
                r3 = this.prefix_operator(ref cursor);
                var opEnd = cursor;
                var op = ValueOrDefault(r3);
                if (r3 != null)
                {
                    r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                        #line 216 "lucene-query.grammar"
     
        op
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> prefix_operator(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "+");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "-");
            }
            return r0;
        }

        private IParseResult<IList<string>> _(ref Cursor cursor)
        {
            IParseResult<IList<string>> r0 = null;
            var startCursor0 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r1 = null;
                r1 = this.ParseClass(ref cursor, "  \t\t\r\r\n\n\f\f");
                if (r1 != null)
                {
                    l0.Add(r1.Value);
                }
                else
                {
                    break;
                }
            }
            if (l0.Count >= 1)
            {
                r0 = this.ReturnHelper<IList<string>>(startCursor0, ref cursor, state => l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> EOF(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseAny(ref cursor);
            cursor = startCursor0;
            if (r1 == null)
            {
                r0 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
            }
            return r0;
        }

        private IParseResult<string> ParseLiteral(ref Cursor cursor, string literal, bool ignoreCase = false)
        {
            if (cursor.Location + literal.Length <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, literal.Length);
                if (ignoreCase ? substr.Equals(literal, StringComparison.OrdinalIgnoreCase) : substr == literal)
                {
                    var endCursor = cursor.Advance(substr.Length);
                    var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr);
                    cursor = endCursor;
                    return result;
                }
            }
            return null;
        }

        private IParseResult<string> ParseClass(ref Cursor cursor, string characterRanges, bool negated = false, bool ignoreCase = false)
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var c = cursor.Subject[cursor.Location];
                bool match = false;
                for (int i = 0; !match && i < characterRanges.Length; i += 2)
                {
                    match = c >= characterRanges[i] && c <= characterRanges[i + 1];
                }
                if (!match && ignoreCase && (char.IsUpper(c) || char.IsLower(c)))
                {
                    var cs = c.ToString();
                    for (int i = 0; !match && i < characterRanges.Length; i += 2)
                    {
                        var min = characterRanges[i];
                        var max = characterRanges[i + 1];
                        for (char o = min; !match && o <= max; o++)
                        {
                            match = (char.IsUpper(o) || char.IsLower(o)) && cs.Equals(o.ToString(), StringComparison.CurrentCultureIgnoreCase);
                        }
                    }
                }
                if (match ^ negated)
                {
                    var endCursor = cursor.Advance(1);
                    var substr = cursor.Subject.Substring(cursor.Location, 1);
                    var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr);
                    cursor = endCursor;
                    return result;
                }
            }
            return null;
        }

        private IParseResult<string> ParseAny(ref Cursor cursor)
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, 1);
                var endCursor = cursor.Advance(1);
                var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr);
                cursor = endCursor;
                return result;
            }
            return null;
        }

        private IParseResult<T> ReturnHelper<T>(Cursor startCursor, ref Cursor endCursor, Func<Cursor, T> wrappedCode)
        {
            var result = wrappedCode(endCursor);
            var lexical = result as ILexical;
            if (lexical != null && lexical.StartCursor == null && lexical.EndCursor == null)
            {
                lexical.StartCursor = startCursor;
                lexical.EndCursor = endCursor;
            }
            return new ParseResult<T>(startCursor, endCursor, result);
        }

        private Exception ExceptionHelper(Cursor cursor, Func<Cursor, string> wrappedCode)
        {
            var ex = new FormatException(wrappedCode(cursor));
            ex.Data["cursor"] = cursor;
            return ex;
        }

        private T ValueOrDefault<T>(IParseResult<T> result)
        {
            return result == null
                ? default(T)
                : result.Value;
        }
    }
}
